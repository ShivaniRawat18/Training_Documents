************************
Day 16 : 20th Feb. 2025 
************************

	Overview of Jenkins :::
	# Jenkins is a CI/CD tool, primarily used as an open-source automation server for continuous integration and continuous delivery (CI/CD), automating various stages of software development like building, testing, and deployment.


		Jenkins is an Open-Source Build Orchestration Tool.
		
		
		- Archetecture of Jenkins :
		
		
			- Based on Master/Slave Archetecture
			
				Jenkins_Master Node  (VM)			==> Is used create Jenkins Projects/Pipelines Jobs to Automate the process.
														Is used to schedule the builds in the Jenkins Slave Nodes.
														
					Jenkins_Slave Node (VM)			==> Used of Perform Application Build 


	Build Orchestration Tool - Jenkins
	
	Jenkins :::
	
	Continuous Development & Continuous Integration ::::
	
		Using DevOps Approach ::
			Developers :
			-- Create Application Source Code 
			-- Commit the Source Code to Source Code Repository like github
			
			Using DevOps Process :
			Automate ::

			- Build the code - Compile and create artifacts 					
			- Unit Testing 					
			- Promote the Application to higher testing Environment					
			- Notify the Testing/Development Team 	

		Tools :::
		
			- Eclipse based IDEs - like Eclipse for Java,Pycharm,Intellij, Visual Studio, Visual Studio Code
			- Source Code Management Tool - like github/AWS Code Commit/Azure Repos 
			- Jenkins/AzurePipeline/AWS CodeBuild/gitlab-ci			
		
	What is Jenkins :::
	
		Jenkins is Open-Source Build Orchestration Tool.
		Used to Automate the End-to-End Application Build and Deployments
		Using Jenkins we can create CI/CD Pipelines 
		
	Jenkins Architecture ::
	
		Jenkins is based on Master-Slave Architecture :::
		
			Jenkins_Master (VM)				==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts		
		
		

************************
Day 17 : 21st Feb. 2025 
************************

	Jenkins Build Orchestration Tool :::
	
	
	Jenkins Architecture ::
	
		Jenkins is based on Master-Slave Architecture :::
		
			Jenkins_Master (VM)				==> Install Jenkins - To Create Jenkins CI/CD Pipeline Jobs/Projects
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts		
				
				
	Scenario 1 :
	
		Java Based Applications :
		
		Frequency of Build and Production Release is very less.
		
		
		Jenkins : Stand-alone Server 
		
			Jenkins_Master (VM)				==> Install git,jdk,jenkins,Maven 
												To Create Jenkins CI/CD Pipeline Jobs/Projects and execute.
												Perform Application Build - compile/create artifacts
					
				Jenkins_Slave_Node1 (VM)	==> Java Application Build 


					
	Scenario 2: 
	
		Java/Python/.Net/Ruby/Angular/NodeJS
		
		Frequency of Build and Prod Release is very high
		
		Jenkins :	Master-Slave Architecture
		
			Jenkins_Master (VM)				==> Install git,jdk,jenkins
												Is used create Jenkins Projects/Pipelines Jobs to Automate the Builds.
			                                    It schedule the builds to run in the respective Jenkins Slave Nodes.
												
					Jenkins_Slave(VM)		==> Perform Application Build - compile/create artifacts # Build Server
					
					Jenkins_Slave_Node1 (VM)	==> Java Application Build 
					Jenkins_Slave_Node2 (VM)	==> Python Application Build 
					Jenkins_Slave_Node3 (VM)	==> .Net Application Build 
					Jenkins_Slave_Node4 (VM)	==> Angular Application Build 
					Jenkins_Slave_Node5 (VM)	==> NodeJS Application Build 
					
					
	Jenkins Projects/Pipelines Jobs :::
	
		Jenkins Pipeline Project - CICD Workflow :
		
		Environments :
		
			Dev :
				Developer Created the Java Web Application Project 
				Pushed the Project Source Codes to Github Repository
				
			Build_Server :
			
				1. SCM_Checkout
				2. Application Build using Maven 
				3. Unit Testing 
					Email Notifications
				4. Create Artifacts 
				5. Promoted to QA Environment
					Email Notifications
				6. Automated QA Testing
					Email Notifications
				5. Promoted to UAT Environment
					Email Notifications
				6. Automated UAT Testing
					Email Notifications
				5. Promoted to Prod Environment
					Email Notifications
				6. Automated Prod Testing 
					Email Notifications
					
	Working with Jenkins :::

		- Developers' Perspectives :
		
			- Developers are just the consumer of Jenkins Projects.
			- Developers can Execute the Jenkins Project, Cancel the Job Execution, Check the Output of Jenkins Jobs.
		
		- DevOps Perspectives :
		
			- DevOps Team owns the Jenkins Archetecture
			
			- DevOps Team is going to administrate Jenkins Servers 			
		
		Roles and Responsibilities of DevOps Team :::
			
			- Installation of Jenkins 
			- Plugins Management 
			- Global System Configurations 
			- Tools Management 
			- User Management 
			- Security Management 
			- Credential Management 
			- Create CICD Pipeline Projects for all the Applications
			- Jenkins Master/Slave Configuration
			- Onboard the Applications to Jenkins CICD Process 
			- TroubleShoot the Issues
			- Periodically take care of the Backup of Jenkins Projects and Services 
			- Periodically upgrade the Jenkins Servers and Plugins
			
			
	
	- Installation of Jenkins :::
	
			https://www.jenkins.io/doc/book/installing/
	
		AWS Cloud Platform :
		
			Create EC2 Instances (VM) - Ubuntu 22.04v 
			Install Jenkins.
			
			Package Management :
			
				apt install jenkins 
				
				1. Install the Pre-requisites			==> git, jdk,
				
				2. Install the Actual Tool 				==> Jenkins 
				
				3. Post Installation Activities 		==> Start Jenkins Service
			
			
			Jenkins run as a service - it can be accessible using Web Browser 
			Jenkins by default run in port 8080
				
			

************************
Day 18 : 24th Feb. 2025 
************************
	
			- Plugins Management 
				- Enable/Disable/Uninstall/Install/Upgrade the Plugins 
				
			- Global System Configurations 
			- Tools Management 
			- User Management 				# To enable User Authentication
			- Security Management 			# To enable User Authorization
			- Credential Management 
			
			
	- Create Jenkins Project/Job :
	
		Jenkins Projects / Jobs :
		
			- Freestyle Project 			# Manual Configurations using GUI 	- Not Reusable
			
			- Pipeline Project 				# Done using Groovy Scripts			- This can be reusable 
			
			
		Handling Variables ::
		
			- Environment Variables 		# Pre-defined system variables can be used in the jenkins project


				echo "jenkins-${JOB_NAME}-${BUILD_NUMBER}"
				
					"${var_name}"
			
			
			- User Defined Variables 		# User Defined 	
				
					String envi = "QA"
					

		TroubleShoot the Issues
		
		
		
Next :	
	- Pipeline Project :::
		

************************
Day 19 : 25th Feb. 2025 
************************

	- Create CICD Pipeline Projects
	
	- Jenkins Master/Slave Configuration
	
	
	Application Build and Deployments :
	
	Jenkins Pipeline :
	
	Stages :
		Stage1 :
			Task1 
		Stage2 : 
			Task1
			Task2 
			
			
	Pipeline Projects :
	
		- Scripted Pipelines 	
		
		- Declarative Pipelines 
		
pipeline {
    agent any

    stages {
        stage('Hello1') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Hello2') {
            steps {
                echo 'Hello World'
            }
        }
    }
}


Java Maven Web Application : Build and Deploy to Target Environment using Jenkins Pipeline.

pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Check out'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build using Maven'
            }
        }
        stage('Deploy to Target Server') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
        }
    }
}


Master-Slave Archetecture :::

	Jenkins_Master Node  (VM)			==> Is used create Jenkins Projects/Pipelines Jobs to Automate the process.
											Is used to schedule the builds in the Jenkins Slave Nodes.
											
		Jenkins_Slave Node (VM)			==> Used of Perform Application Build 
		
		
		
	Jenkins_Master (VM) 				==> Install git,jdk,jenkins 
	
		Jenkins_Slave Node (VM)			==> Install git,jdk,maven
											Create a User ID 
											Create Key Pair
		
		
		
	Remote Server Handling :::
	
		Using SSH :
		
			-> User_Name 
			-> Host_Name 			# Private IP Address of Slave Node1
			-> Key_Pair
				- Public Key 
				- Private Key


pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Check out'
				git 'https://github.com/PaperLive-DevOps-Jan25/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build using Maven'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Server - QA Testing') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
        }
    }
}


Deploy the Artifacts to Target Server :


Deployment ?? 			# Copy 

	Target Server / Deployment / Hosted Server 
	
	Web Application Servers(WAS) - Tomcat / nginx / apache httpd			# Used to execute / run the Web application artifacts 
	
	
	
	How to configure the Tomcat Web Application Server (WAS) 
	
	
	Jenkins_Master (VM) 				==> Install git,jdk,jenkins 
	
		Jenkins_Slave Node (VM)			==> Install git,jdk,maven
											Create a User ID 
											Create Key Pair	
											
	Tomcat_Server (VM)					==> jdk, Tomcat WAS
											Create a User ID
		                                    Create Key Pair	
											
	
	Install Publish Over SSH Plugins in Jenkins Master Node.	
			- Is to establish secure connection and copy the artifacts to the Remote Servers through Jenkins_Master
			
			
			Goto Plugins Manager - under Available Plugins tab - search for Publihs over ssh plugin and install.
			Enable Restart upon installation 
			
			
			
	Deployment ::
	
	
		Source Server: 													Target Server:
		
			Jenkins_Slave_Node1 											Tomcat_Server
			
				Source Path:														Target Path:

					target/*.war													 	/opt/tomcat/webapps/
																						
																						/opt/tomcat/webapps/*.war
			
				
Next :

		Configure Tomcat Server 
		Create CICD Pipeline 
		
		Build Trigger 
		
		Email Notifications 		


************************
Day 20 : 27th Feb. 2025 
************************

	Configure Tomcat Server 
	Create CICD Pipeline 
	
	Build Trigger 
	
	Email Notifications 	
	
	
	Jenkins_Master (VM) 				==> Install git,jdk,jenkins 
	
		Jenkins_Slave Node (VM)			==> Install git,jdk,maven
											Create a User ID 
											Create Key Pair	
											
	Tomcat_Server (VM)					==> jdk, Tomcat WAS
											Create a User ID
		                                    Create Key Pair	
											
	Install Publish Over SSH Plugins in Jenkins Master Node.	
			- Is to establish secure connection and copy the artifacts to the Remote Servers through Jenkins_Master
			
			
			Goto Plugins Manager - under Available Plugins tab - search for Publish over ssh plugin and install.
			Enable Restart upon installation 

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Check out'
				git 'https://github.com/PaperLive-DevOps-Jan25/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build using Maven'
				sh 'mvn clean package'
            }
        }
        stage('Deploy to Target Server - QA Testing') {
            steps {
				script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/demo-1.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}                
            }
        }
    }
}

sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/demo-1.0-SNAPSHOT.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])



pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Check out'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build using Maven'
            }
        }
        stage('Deploy to QA Server') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
        }
        stage('Deploy to UAT Server') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
        }
        stage('Deploy to PROD Server') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
        }
    }
}


Build Trigger :::

	Build Triggers :::
	
		It used to Automate the Job Execution.
		
		-> Build Periodic					# https://crontab.guru/
		
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- The build is sheduled based on the crontab 
			
			Non-Prod Environments 										Prod Environment
			 Shd be available only during business hrs 
				DEV Servers 
				BUILD
				QA/UAT 														Prod Servers 
				
				
				Start_Servers_Job: 8AM 
				Stop_Servers_Job: 10PM 
		
		
		-> Github Webhook 
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL
			
			PayLoad URL : http://43.204.228.135:8080/github-webhook
		
		
		-> Poll-SCM 
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			Eg.: 
			
				Test Cycles :::
				
				
				8AM - 12PM - 3PM 
				

Next :::

	Email Notifications 
	
	Docker Module



************************
Day 21 : 28th Feb. 2025 
************************

	Email Notifications using Jenkins Pipeline :
	
	1. Setup the Email Server
		- Create Account - Gmail 
		- Enabled with the App Token/Access Token	# Credential to config in Jenkins.
		
	2. Login to Jenkins Server 
		- Managed Jenkins --> Email Notifications --> Add Email Server Configurations.
		- Test the Email Configurations



	Email Notifications :::::::
	
		In Jenkins Pipeline Jobs, Email Notifications can be done as a post build action.
		
		
		Stage{}
		post{
			success 
			failure 
			abort
		}
		
		

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

Two Way Authentication - MFA --> mobile#

App Password = 16 bytes of App Password. vaufxwhdbtnlltzr vauf xwhd btnl ltzr

What ? window
Which Appln - email	

	
To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465


User Name : <EMail_ID>

Password : <App Password>

pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Check out'
				git 'https://github.com/PaperLive-DevOps-Jan25/java-mvn-springbootapp.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build using Maven'
				sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to QA Server') {
            steps {
                echo 'Perform Application Deployment to Target - Tomcat Server'
            }
             post {
                success {
                  sh "echo 'Send mail on Success'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment Successful ', to: 'l@gmail.com'
                }
                failure {
                  sh "echo 'Send mail on Failure'"
					mail bcc: 'l@gmail.com', body: "Jenkins Jobs Status ${BUILD_URL}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment Failed ', to: 'l@gmail.com'
					
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ${BUILD_URL}', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'Deployment Successful', to: 'l@gmail.com,l2@gmail.com'
                }
              }
        }
    }
}	


